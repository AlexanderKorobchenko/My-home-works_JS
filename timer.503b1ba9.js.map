{"version":3,"sources":["module_11/timer/timer.js"],"names":["Timer","constructor","selector","targetDate","start","targetTime","getTime","startDeltaTime","Date","now","console","log","interval","setInterval","deltaTime","clearInterval","updateInterface","separator","time","days","Math","floor","hours","mins","secs","CountdownTimer","document","querySelector","children","childNodes","innerText","timer","timer2"],"mappings":";AACA,MAAMA,EAEFC,aAAY,SAAEC,EAAF,WAAYC,IACfD,KAAAA,SAAWA,EACPC,KAAAA,WAAaA,EAI1BC,QACUC,MAAAA,EAAa,KAAKF,WAAWG,UAI/BC,GAHmBF,EAAaG,KAAKC,MAGpB,EACVC,OAAAA,QAAQC,gBAAgB,KAAKT,4DAIlCU,MAAAA,EAAWC,YAAY,KACnBC,MAAAA,EAAYT,EAAaG,KAAKC,MAGhCK,GAAAA,EAAY,EAGLJ,OADPK,cAAcH,GACPF,QAAQC,aAAa,KAAKT,mBAIhCc,KAAAA,gBAAgB,KAAKC,UAAUH,KACrC,KAIPG,UAAUC,GAMC,MAAA,CAAEC,KALIC,KAAKC,MAAMH,EAAQ,OAKjBI,MAJDF,KAAKC,MAAOH,EAAQ,MAAyB,MAIrCK,KAHTH,KAAKC,MAAOH,EAAQ,KAAoB,KAGzBM,KAFfJ,KAAKC,MAAOH,EAAQ,IAAc,MAMnDF,iBAAgB,KAAEG,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC3BC,MAAAA,EAAiBC,SAASC,cAAc,KAAKzB,UAAU0B,SAE7DH,EAAe,GAAGI,WAAW,GAAGC,UAAYX,EAAO,OAASA,IAASA,EACrEM,EAAe,GAAGI,WAAW,GAAGC,UAAYR,EAAQ,OAASA,IAAUA,EACvEG,EAAe,GAAGI,WAAW,GAAGC,UAAYP,EAAO,OAASA,IAASA,EACrEE,EAAe,GAAGI,WAAW,GAAGC,UAAYN,EAAO,OAASA,IAASA,GAK7E,MAAMO,EAAQ,IAAI/B,EAAM,CACpBE,SAAU,WACVC,WAAY,IAAIK,KAAK,iBAGzBuB,EAAM3B,QAGN,MAAM4B,EAAS,IAAIhC,EAAM,CACrBE,SAAU,WACVC,WAAY,IAAIK,KAAK,iBAGzBwB,EAAO5B","file":"timer.503b1ba9.js","sourceRoot":"../src","sourcesContent":["// Сласс-конструктор, который ведет отсчет времени и обновляет интерфейс выбранного элемента\nclass Timer {\n    // Передаваемые параметры\n    constructor({ selector, targetDate }) {\n        this.selector = selector, // DOM-элемент, на котором проводим обновления\n            this.targetDate = targetDate // Задаваемая дата отсчета\n    }\n\n    // Запуск процесса\n    start() {\n        const targetTime = this.targetDate.getTime();// Дата -> секунды\n        const startDeltaTime = targetTime - Date.now();\n\n        // Если дата уже прошла\n        if (startDeltaTime < 0) {\n            return console.log(`Дата для ${this.selector} введена не корректно. Введите дату из будущего!`);\n        }\n\n        // Дата введена верно, считаем...\n        const interval = setInterval(() => {\n            const deltaTime = targetTime - Date.now();\n\n            // если счетчит досчитал, то выходим\n            if (deltaTime < 0) {\n                //this.updateInterface(this.separator(0));\n                clearInterval(interval);\n                return console.log(`Время ${this.selector} вышло!`);\n            }\n\n            // если еще нет, то считаем...\n            this.updateInterface(this.separator(deltaTime));\n        }, 1000)\n    }\n\n    // Превращаем значение в понятные числа\n    separator(time) {\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n        return { days, hours, mins, secs };\n    }\n\n    // Функция, которая обновляет интерфейс \n    updateInterface({ days, hours, mins, secs }) {\n        const CountdownTimer = document.querySelector(this.selector).children;\n\n        CountdownTimer[0].childNodes[1].innerText = days < 10 ? `0${days}` : days;\n        CountdownTimer[1].childNodes[1].innerText = hours < 10 ? `0${hours}` : hours;\n        CountdownTimer[2].childNodes[1].innerText = mins < 10 ? `0${mins}` : mins;\n        CountdownTimer[3].childNodes[1].innerText = secs < 10 ? `0${secs}` : secs;\n    };\n};\n\n// Передаем условия задачи...\nconst timer = new Timer({\n    selector: '#timer-1',\n    targetDate: new Date('Aug 9, 2021')\n});\n\ntimer.start();\n\n//Новый год...\nconst timer2 = new Timer({\n    selector: '#timer-2',\n    targetDate: new Date('Jan 1, 2022')\n});\n\ntimer2.start();\n// Думаю, разбежность в час выплывает из-за перехода летнее/зимнее время\n"]}